{
    // Place your sig workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "Create suite for Comparator": {
        "scope": "typescript",
        "prefix": "checktest",
        "body": [
            "describe('$1', () => {",
            "\tit('should find changes', () => {",
            "\t\texpect({",
            "\t\t\tv1: `export ${2|function test() {},interface Test {},type Test = ${}|}",
            "\t\t\t`,",
            "\t\t\tv2: `export ${2|function test() {},interface Test {},type Test = ${}|}",
            "\t\t\t`,",
            "\t\t\tcode: '$1',",
            "\t\t} as ComparatorTestPayload).toFindChanges(``)",
            "\t})",
            "\tit('should not find changes', () => {",
            "\t\texpect({",
            "\t\t\tv1: `export ${2|function test() {},interface Test {},type Test = ${}|}",
            "\t\t\t`,",
            "\t\t\tv2: `export ${2|function test() {},interface Test {},type Test = ${}|}",
            "\t\t\t`,",
            "\t\t\tcode: '$1',",
            "\t\t} as ComparatorTestPayload).toFindNoChanges()",
            "\t})",
            "})"
        ],
        "description": "Create suite for Comparator"
    },
    "Create Comparator (old)": {
        "scope": "typescript",
        "prefix": "old_checker",
        "body": [
            "export function $1({",
            "\tbefore,",
            "\tafter,",
            "}: Comparator.CompareOpt<Signatures.SignatureType>): Comparator.Change<'$1'> {",
            "\tif (after && after.memberType === 'class' && before.memberType === 'class') {",
            "\t}",
            "\treturn {",
            "\t\tinfo: CHANGE_REGISTRY.no_change,",
            "\t\tsignatures: { before, after },",
            "\t}",
            "}"
        ],
        "description": "Create Comparator (old)"
    },
    "Create Comparator (new)": {
        "scope": "typescript",
        "prefix": "checker",
        "body": [
            "import { Comparator } from '../Comparators'",
            "import { CHANGE_REGISTRY } from '../ComparatorChangeRegistry'",
            "import Common = Comparator.Utils.Common",
            "",
            "export const $1 = Common.comparatorFor.${2|function,interface,type|}(signatures => {",
            "\tconst { after, before } = signatures",
            "\tconst changed: Common.WithName[] = []",
            "\tif (changed.length) {",
            "\t\tconst changedMessage = Common.formatSequenceMessage(changed)",
            "\t\treturn {",
            "\t\t\tinfo: CHANGE_REGISTRY.$1,",
            "\t\t\tsignatures,",
            "\t\t\tmessage: ``,",
            "\t\t}",
            "\t}",
            "})"
        ],
        "description": "Create Comparator (new)"
    },
    "Create object with after impl": {
        "scope": "typescript",
        "body": ["const afterO = after.$0.reduce(Reducer.toObject(Common.getName), {})"],
        "description": "Create object with after impl",
        "prefix": "afterO"
    },
    "Comparator chagne code": {
        "description": "creta comparator change code object",
        "body": [
            "$1: {",
            "\taction: '${2|changed,added,removed|}',",
            "\tcode: '$1',",
            "\tdescription: '$3',",
            "\tmemberType: '${4|interface,function,class|}',",
            "\tstatus: '${5|breaking,compatible|}',",
            "}"
        ],
        "prefix": "code",
        "scope": "typescript"
    }
}
